name: Coverage

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '**.cpp', '**.hpp*', '**.cmake', 'include/yaclib_std/*', '**/CMakeLists.txt' ]
  pull_request:
    branches: [ main ]
    paths: [ '**.cpp', '**.hpp*', '**.cmake', 'include/yaclib_std/*', '**/CMakeLists.txt' ]

jobs:
  main:
    runs-on: ubuntu-22.04

    env:
      YACLIB_FAULT: 'OFF THREAD FIBER'

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install ninja-build lcov googletest                                                             \
                           gcc-12 g++-12 libstdc++-12-dev lld-15
          #                llvm-18 clang-18 libc++-18-dev libc++abi-18-dev
          sudo ln -sf /usr/bin/lld-15 /usr/local/bin/ld

          sudo update-alternatives                                                                                     \
            --install /usr/bin/gcc        gcc        /usr/bin/gcc-12        200                                        \
            --slave   /usr/bin/g++        g++        /usr/bin/g++-12                                                   \
            --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-12                                                \
            --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-12                                                \
            --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-12                                            \
            --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-12                                                  \
            --slave   /usr/bin/gcov-tool  gcov-tool  /usr/bin/gcov-tool-12                                             \
            --slave   /usr/bin/gcov-dump  gcov-dump  /usr/bin/gcov-dump-12
          sudo update-alternatives --auto gcc

          gcc --version; gcov --version

      - name: Configure CMake
        run: |
          wait_type=""
          compilers=(g++)
          for (( i=0; i<${#compilers[*]}; i+=1 )); do
            for yaclib_fault in ${YACLIB_FAULT[*]}; do
              dir="build_${compilers[$i]}_fault_${yaclib_fault}"
              echo $dir

              cmake -S . -B $dir                                                                                       \
                -G "Ninja"                                                                                             \
                -DCMAKE_BUILD_TYPE=Debug                                                                               \
                -DCMAKE_CXX_COMPILER="${compilers[$i]}"                                                                \
                -DYACLIB_FAULT="$yaclib_fault"                                                                         \
                -DYACLIB_TEST=SINGLE                                                                                   \
                -DYACLIB_FLAGS="COVERAGE;CORO;$wait_type"                                                              \
                -DYACLIB_CXX_STANDARD=20                                                                               \
                -DYACLIB_COMPILE_OPTIONS="-Og;-fno-inline"

              lcov --zerocounters --directory .

              if [[ "$wait_type" == "" ]]; then
                wait_type="DISABLE_FUTEX"
              fi
            done
          done

      - name: Build
        run: |
          for dir in build*/; do
            ninja -C $dir
          done

      - name: Test
        run: |
          for dir in build*/; do
            cd $dir
            ctest --output-on-failure -C Debug -V
            cd ..
          done

      - name: Collect with lcov
        run: |
          echo '#!/bin/bash 
                exec llvm-cov-18 gcov "$@"' > ./llvm_gcov.sh
          chmod +x ./llvm_gcov.sh
          compilers=(g++)
          for (( i=0; i<${#compilers[*]}; i+=1 )); do
            for yaclib_fault in ${YACLIB_FAULT[*]}; do
              dir="build_${compilers[$i]}_fault_${yaclib_fault}"
              echo $dir
              if [[ "${compilers[i]}" == "g++" ]]; then
                gcov_tool="gcov"
              else
                gcov_tool="`pwd`/llvm_gcov.sh"
              fi

              cd $dir
              lcov --rc branch_coverage=1 --rc geninfo_unexecuted_blocks=1 --gcov-tool "$gcov_tool" -d . -c -o lcov.info
              # TODO(myannyax) remove '-r lcov.info "*/fault/*"'
              lcov --rc branch_coverage=1                                                                         \
                -r lcov.info "/usr/*"                                                                                  \
                -r lcov.info "*/_deps/*"                                                                               \
                -r lcov.info "*/test/*"                                                                                \
                -r lcov.info "*/fault/*"                                                                               \
                -r lcov.info "*/yaclib_std/*"                                                                          \
                -o lcov.info
              cd ..
            done
          done

          lcov --rc branch_coverage=1                                                                             \
            --add-tracefile ./build_g++_fault_OFF/lcov.info                                                            \
            --add-tracefile ./build_g++_fault_THREAD/lcov.info                                                         \
            --add-tracefile ./build_g++_fault_FIBER/lcov.info                                                          \
            --output-file   ./total.info

          lcov --rc branch_coverage=0 -r ./total.info -o ./total_without_branch.info

          lcov --rc branch_coverage=1 --list ./total.info

      - name: Coveralls
        uses: coverallsapp/github-action@1.1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./total.info

      - name: Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./total_without_branch.info
