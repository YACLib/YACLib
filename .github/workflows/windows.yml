name: Windows

on:
  push:
    branches: [ main ]
    paths-ignore: [ 'doc/**', '**.md' ]
  pull_request:
    branches: [ main ]
    types: [ assigned ]
    paths-ignore: [ 'doc/**', '**.md' ]
  schedule:
    - cron: '0 * * * *'

jobs:
  # TODO(MBkkt) Add windows-2016?
  # TODO(MBkkt) Add Cygwin?
  # TODO(MBkkt) Run tests with MinGW

  main:
    runs-on: 'windows-${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        arch: [ Win32, x64 ]
        os: [ 2019, 2022 ]
        build_type: [ Debug, RelWithDebInfo ]

    steps:
      - uses: actions/checkout@v2

      - name: Set up MinGW x86
        if: ${{ matrix.arch != 'x64' }}
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x86

      - name: Set up MinGW x64
        if: ${{ matrix.arch == 'x64' }}
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Configure CMake
        shell: bash
        run: |
          cmake --version
          names=("ClangCL" "MinGW" "MSVC")
          if [[ "${{ matrix.os }}" == "2022" ]]; then
            msvc="17 2022"
          else
            msvc="16 2019"
          fi
          generators=("Visual Studio $msvc" "MinGW Makefiles" "Visual Studio $msvc")
          options=("-A ${{ matrix.arch }} -T ClangCL" "" "-A ${{ matrix.arch }}")
          for (( i=0; i<${#names[*]}; i+=1 )); do
            if [[ "${{ matrix.arch }}" == "Win32" ]]; then
              slowdown=5
            else
              slowdown=1
            fi
            dir="build_${names[$i]}"; echo $dir
            cmake -S . -B $dir                            \
              -G "${generators[$i]}"                      \
              ${options[$i]}                              \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DYACLIB_BUILD_TESTING=ON                   \
              -DYACLIB_BUILD_EXAMPLES=ON                  \
              -DYACLIB_CXX_STANDARD=17                    \
              -DYACLIB_DEFINITIONS="YACLIB_CI_SLOWDOWN=$slowdown"
            echo
          done

      - name: Build
        shell: bash
        run: |
          names=("ClangCL" "MinGW" "MSVC")
          for (( i=0; i<${#names[*]}; i+=1 )); do
            dir="build_${names[$i]}"; echo $dir
            cmake --build $dir --config ${{ matrix.build_type }} --parallel 4
            echo
          done

      - name: Test
        shell: bash
        run: |
          names=("ClangCL" "MinGW" "MSVC")
          for (( i=0; i<${#names[*]}; i+=1 )); do
            if [[ "${names[$i]}" == "MinGW" || 
                  ( "${{ matrix.arch }}" == "Win32" && 
                    "${{ matrix.build_type }}" == "RelWithDebInfo" && 
                    "${names[$i]}" == "ClangCL" ) ]]; then
              continue; # second condition about some seh error in gtest code, FUCK MSVC SHIT
            fi
            dir="build_${names[$i]}"; echo $dir; cd $dir
            ctest --output-on-failure -C ${{ matrix.build_type }} -VV
            cd ..; echo
          done
