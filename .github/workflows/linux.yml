name: Linux

on:
  push:
    branches: [ main ]
    paths-ignore: [ 'doc/**', '**.md' ]
  pull_request:
    branches: [ main ]
    paths-ignore: [ 'doc/**', '**.md' ]
  schedule:
    - cron: '0 12 * * 1-5'

jobs:
  # TODO(MBkkt) Add clang-5.0, clang-6.0, clang-7
  #             Fucking cppreference liars, clang doesn't support simple variant usage, before clang-8!
  #             We can only support this when we remove the variant from the Result
  # TODO(MBkkt) Add gcc-12, clang-15 when it release
  # TODO(MBkkt) Add other compilers, like Intel C++?
  # TODO(MBkkt) libstdc++-7-dev, libc++ old version

  main:
    runs-on: 'ubuntu-${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ 18.04, 20.04 ]
        compiler: [ clang-8, clang-9, clang-10, clang-11, clang-12, clang-13, clang-14,
                    gcc-7, gcc-8, gcc-9, gcc-10, gcc-11 ]
        isPR:
          - ${{ github.event_name == 'pull_request' }}
        exclude:
          - isPR: true
            os: 20.04
            compiler: clang-8
          - isPR: true
            os: 20.04
            compiler: clang-9
          - isPR: true
            os: 20.04
            compiler: clang-10
          - isPR: true
            os: 20.04
            compiler: clang-11
          - isPR: true
            os: 20.04
            compiler: clang-12
          - isPR: true
            os: 20.04
            compiler: clang-13
          - isPR: true
            os: 20.04
            compiler: clang-14
          - isPR: true
            os: 20.04
            compiler: gcc-7
          - isPR: true
            os: 20.04
            compiler: gcc-8
          - isPR: true
            os: 20.04
            compiler: gcc-9
          - isPR: true
            os: 20.04
            compiler: gcc-10
          - isPR: true
            os: 20.04
            compiler: gcc-11


    env:
      BUILD_TYPE: 'Debug RelWithDebInfo'

    steps:
      - uses: actions/checkout@v2

      - name: Update dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build googletest libunwind-dev

      - name: Install dependencies clang
        if: ${{ matrix.compiler == 'clang-8' }}
        run: |
          sudo apt-get install clang-8 libc++-8-dev libc++abi-8-dev libstdc++-7-dev

      - name: Install dependencies clang
        if: matrix.compiler != 'clang-8' && !startsWith(matrix.compiler, 'gcc')
        run: |
          sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          if [[ ${{ matrix.os }} == "18.04" ]]; then
            ubuntu="bionic"
          else
            ubuntu="focal"
          fi
          compiler=${{ matrix.compiler }}
          version=${compiler:6}
          sudo add-apt-repository "deb http://apt.llvm.org/$ubuntu/ llvm-toolchain-$ubuntu-$version main"
          sudo apt-get update
          sudo apt-get install clang-$version libc++-$version-dev libc++abi-$version-dev libstdc++-7-dev

      - name: Install dependencies gcc
        if: startsWith(matrix.compiler, 'gcc')
        run: |
          compiler=${{ matrix.compiler }}
          version=${compiler:4}
          sudo apt-get install gcc-$version g++-$version libstdc++-$version-dev

      - name: Configure CMake
        run: |
          if [[ ${{ matrix.compiler }} == gcc* ]]; then
            compiler=${{ matrix.compiler }}
            version=${compiler:4}
            compilers=("gcc-$version" "g++-$version")
            if [[ $version -lt 10 ]]; then
              standard=17
            else 
              standard=20
            fi 

          else
            compiler=${{ matrix.compiler }}
            version=${compiler:6}
          
            compilers=("clang-$version" "clang++-$version")
          fi

          stdlibs_name=(libcxx libstdcxx)
          link_options=(
            "-stdlib=libc++;-lc++abi"
            "-stdlib=libstdc++"
          )
          compile_options=(
            "-stdlib=libc++"
            "-stdlib=libstdc++"
          )

          
          for (( j=0; j<${#link_options[*]}; j+=1 )); do
            for build_type in ${BUILD_TYPE[*]}; do
              link_option=""; compile_option=""
              if [[ ${compilers[0]} == gcc* ]]; then
                if [[ ${stdlibs_name[$j]} != "libstdcxx" ]]; then
                  continue  # TODO(MBkkt) I dunno how to get GNU GCC to work with other stdlibs
                fi
              else
                link_option=${link_options[$j]}; compile_option=${compile_options[$j]}
                if [[ ${stdlibs_name[$j]} == "libstdcxx" || ${compilers[0]} == clang-8 ]]; then
                  standard=17
                else
                  standard=20
                fi
              fi
        
              dir="build_${compilers[0]}_${stdlibs_name[$j]}_$build_type"
              echo $dir

              cmake -S . -B $dir                           \
                -DCMAKE_BUILD_TYPE=$build_type             \
                -DYACLIB_CXX_STANDARD=$standard            \
                -DYACLIB_TEST=SINGLE                       \
                -DYACLIB_FLAGS="CORO"                      \
                -DCMAKE_C_COMPILER=${compilers[0]}         \
                -DCMAKE_CXX_COMPILER=${compilers[1]}       \
                -G"Ninja"                                  \
                -DYACLIB_LINK_OPTIONS="$link_option"       \
                -DYACLIB_COMPILE_OPTIONS="$compile_option"
            done
          done

      - name: Build
        run: |
          for dir in build*/; do
            ninja -C $dir
          done

      - name: Test
        run: |
          for dir in build*/; do
            cd $dir;
            ctest --output-on-failure -V
            cd ..
          done
