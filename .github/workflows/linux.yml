name: Linux

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '**.cpp', '**.hpp*', '**.cmake', 'include/yaclib_std/*', '**/CMakeLists.txt' ]
  pull_request:
    branches: [ main ]
    paths: [ '**.cpp', '**.hpp*', '**.cmake', 'include/yaclib_std/*', '**/CMakeLists.txt' ]
  schedule:
    - cron: '0 12 * * 1-5'

jobs:
  # TODO(MBkkt) Add clang-5.0, clang-6.0, clang-7
  #             Fucking cppreference liars, clang doesn't support simple variant usage, before clang-8!
  #             We can only support this when we remove the variant from the Result
  # TODO(MBkkt) Add other compilers, like Intel C++?
  # TODO(MBkkt) libstdc++-7-dev, libc++ old version

  main:
    runs-on: 'ubuntu-${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ 20.04, 22.04, 24.04, 22.04-arm, 24.04-arm ]
        compiler: [ 
                    clang-8, clang-9, clang-10, # 20.04
                    clang-11, clang-12, clang-13, # 22.04
                    clang-14, clang-15, clang-16, clang-17, clang-18, # 24.04
                    gcc-7, gcc-8, # 20.04
                    gcc-9, gcc-10, gcc-11, gcc-12 # 24.04
                  ]
        exclude:
          - os: 20.04
            compiler: clang-11
          - os: 20.04
            compiler: clang-12
          - os: 20.04
            compiler: clang-13
          - os: 20.04
            compiler: clang-14
          - os: 20.04
            compiler: clang-15
          - os: 20.04
            compiler: clang-16
          - os: 20.04
            compiler: clang-17
          - os: 20.04
            compiler: clang-18
          - os: 20.04
            compiler: gcc-9
          - os: 20.04
            compiler: gcc-10
          - os: 20.04
            compiler: gcc-11
          - os: 20.04
            compiler: gcc-12
          - os: 20.04
            compiler: gcc-13
          - os: 20.04
            compiler: gcc-14

          - os: 22.04
            compiler: clang-8
          - os: 22.04
            compiler: clang-9
          - os: 22.04
            compiler: clang-10
          - os: 22.04
            compiler: clang-14
          - os: 22.04
            compiler: clang-15
          - os: 22.04
            compiler: clang-16
          - os: 22.04
            compiler: clang-17
          - os: 22.04
            compiler: clang-18
          - os: 22.04
            compiler: gcc-7
          - os: 22.04
            compiler: gcc-8
          - os: 22.04
            compiler: gcc-9
          - os: 22.04
            compiler: gcc-10
          - os: 22.04
            compiler: gcc-11
          - os: 22.04
            compiler: gcc-12
          - os: 22.04
            compiler: gcc-13
          - os: 22.04
            compiler: gcc-14

          - os: 22.04-arm
            compiler: clang-8
          - os: 22.04-arm
            compiler: clang-9
          - os: 22.04-arm
            compiler: clang-10
          - os: 22.04-arm
            compiler: clang-14
          - os: 22.04-arm
            compiler: clang-15
          - os: 22.04-arm
            compiler: clang-16
          - os: 22.04-arm
            compiler: clang-17
          - os: 22.04-arm
            compiler: clang-18
          - os: 22.04-arm
            compiler: gcc-7
          - os: 22.04-arm
            compiler: gcc-8
          - os: 22.04-arm
            compiler: gcc-9
          - os: 22.04-arm
            compiler: gcc-10
          - os: 22.04-arm
            compiler: gcc-11
          - os: 22.04-arm
            compiler: gcc-12
          - os: 22.04-arm
            compiler: gcc-13
          - os: 22.04-arm
            compiler: gcc-14

          - os: 24.04
            compiler: clang-8
          - os: 24.04
            compiler: clang-9
          - os: 24.04
            compiler: clang-10
          - os: 24.04
            compiler: clang-11
          - os: 24.04
            compiler: clang-12
          - os: 24.04
            compiler: clang-13
          - os: 24.04
            compiler: gcc-7
          - os: 24.04
            compiler: gcc-8

          - os: 24.04-arm
            compiler: clang-8
          - os: 24.04-arm
            compiler: clang-9
          - os: 24.04-arm
            compiler: clang-10
          - os: 24.04-arm
            compiler: clang-11
          - os: 24.04-arm
            compiler: clang-12
          - os: 24.04-arm
            compiler: clang-13
          - os: 24.04-arm
            compiler: gcc-7
          - os: 24.04-arm
            compiler: gcc-8


    env:
      BUILD_TYPE: 'Debug RelWithDebInfo'

    steps:
      - uses: actions/checkout@v4

      - name: Update dependencies
        run: |
          sudo apt update
          sudo apt install ninja-build googletest libunwind-dev

      - name: Install dependencies clang
        if: 1 && !startsWith(matrix.compiler, 'gcc')
        run: |
          if [[ ${{ matrix.os }} == "20.04" ]]; then
            gcc_version=7
          else
            gcc_version=9
          fi
          compiler=${{ matrix.compiler }}
          clang_version=${compiler:6}
          sudo apt update
          sudo apt install clang-${clang_version} libc++-${clang_version}-dev libc++abi-${clang_version}-dev       \
                           gcc-${gcc_version} g++-${gcc_version} libstdc++-${gcc_version}-dev

          sudo update-alternatives                                                                                     \
            --install /usr/bin/gcc        gcc        /usr/bin/gcc-${gcc_version}        200                            \
            --slave   /usr/bin/g++        g++        /usr/bin/g++-${gcc_version}                                       \
            --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-${gcc_version}                                    \
            --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-${gcc_version}                                    \
            --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-${gcc_version}                                \
            --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-${gcc_version}                                      \
            --slave   /usr/bin/gcov-tool  gcov-tool  /usr/bin/gcov-tool-${gcc_version}                                 \
            --slave   /usr/bin/gcov-dump  gcov-dump  /usr/bin/gcov-dump-${gcc_version}
          sudo update-alternatives --auto gcc

          gcc --version; gcov --version

      - name: Install dependencies gcc
        if: startsWith(matrix.compiler, 'gcc')
        run: |
          compiler=${{ matrix.compiler }}
          gcc_version=${compiler:4}
          sudo apt install gcc-${gcc_version} g++-${gcc_version} libstdc++-${gcc_version}-dev
          sudo update-alternatives                                                                                     \
            --install /usr/bin/gcc        gcc        /usr/bin/gcc-${gcc_version}        200                            \
            --slave   /usr/bin/g++        g++        /usr/bin/g++-${gcc_version}                                       \
            --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-${gcc_version}                                    \
            --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-${gcc_version}                                    \
            --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-${gcc_version}                                \
            --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-${gcc_version}                                      \
            --slave   /usr/bin/gcov-tool  gcov-tool  /usr/bin/gcov-tool-${gcc_version}                                 \
            --slave   /usr/bin/gcov-dump  gcov-dump  /usr/bin/gcov-dump-${gcc_version}
          sudo update-alternatives --auto gcc

          gcc --version; gcov --version

      - name: Configure CMake
        run: |
          compiler=${{ matrix.compiler }}
          if [[ "$compiler" == gcc* ]]; then
            version=${compiler:4}
            compiler="g++"
            standard=17; flags=""
            if [[ $version -ge 10 ]]; then
              standard=20; flags="CORO"
            fi
          else
            version=${compiler:6}
            compiler="clang++-$version"
          fi

          stdlib_names=(libcxx libstdcxx)
          link_options=(
            "-stdlib=libc++;-lc++abi"
            "-stdlib=libstdc++"
          )
          compile_options=(
            "-stdlib=libc++"
            "-stdlib=libstdc++"
          )

          for (( j=0; j<${#stdlib_names[*]}; j+=1 )); do
            for build_type in ${BUILD_TYPE[*]}; do
              link_option=""; compile_option=""
              if [[ "$compiler" == "g++" ]]; then
                if [[ "${stdlib_names[$j]}" != "libstdcxx" ]]; then
                  continue  # TODO(MBkkt) I dunno how to get GNU GCC to work with other stdlibs
                fi
              else
                link_option=${link_options[$j]}; compile_option=${compile_options[$j]}
                if [[ "${stdlib_names[$j]}" == "libstdcxx" ]]; then
                  # TODO(MBkkt) I know how to enable CORO here, but it's a dirty hack, do we want to check it in CI?
                  standard=17; flags=""
                elif [[ $version -ge 11 ]]; then
                  standard=20; flags="CORO"
                else
                  standard=17; flags=""
                fi
              fi

              dir="build_${compiler}_${stdlib_names[$j]}_${build_type}"
              echo $dir

              cmake -S . -B $dir                                                                                       \
                -DCMAKE_BUILD_TYPE="$build_type"                                                                       \
                -DYACLIB_CXX_STANDARD="$standard"                                                                      \
                -DYACLIB_TEST=SINGLE                                                                                   \
                -DYACLIB_FLAGS="$flags"                                                                                \
                -DCMAKE_CXX_COMPILER="$compiler"                                                                       \
                -G"Ninja"                                                                                              \
                -DYACLIB_LINK_OPTIONS="$link_option"                                                                   \
                -DYACLIB_LOG="DEBUG"                                                                             \
                -DYACLIB_COMPILE_OPTIONS="$compile_option"
            done
          done

      - name: Build
        run: |
          for dir in build*/; do
            ninja -C $dir
          done

      - name: Test
        run: |
          for dir in build*/; do
            cd $dir
            ctest --output-on-failure -V
            cd ..
          done
